"""
Action of "ChannelPublic" type, used for setting a channel to public.

This incorporates an override for a ChannelPublic action as well as an
sqlite repository to store the associated data.
"""

from __future__ import annotations

import uuid
from typing import TYPE_CHECKING, Self, override

from spacecat.modules.automation.event_scheduler import Action, ActionRepository

if TYPE_CHECKING:
    import sqlite3


class ChannelPublicAction(Action):
    """Represents an action that sets a channel to public."""

    def __init__(self: ChannelPublicAction, id_: uuid.UUID, channel_id: int) -> None:
        """
        Initialise a ChannelPublic action instance.

        Use the create_new classmethod to generate a new instance with
        an autogenerated id.

        Args:
            id_ (uuid.UUID): The unique identifier for the action.
            channel_id: The ID of the channel to set to public.
        """
        super().__init__(id_)
        self.channel_id = channel_id

    @classmethod
    def create_new(cls: type[ChannelPublicAction], channel_id: int) -> ChannelPublicAction:
        """
        Create a new ChannelPublicAction instance.

        Parameters:
            channel_id: The ID of the channel to set to public.

        Returns:
            ChannelPrivateAction: A new instance of the class
        """
        return cls(uuid.uuid4(), channel_id)

    @override
    def get_formatted_output(self: Self) -> str:
        return f"Sets channel <#{self.channel_id}> to public visibility."

    @override
    def get_name() -> str:
        return "channel_public"


class ChannelPublicActionRepository(ActionRepository[ChannelPublicAction]):
    """
    Repository for managing ChannelPublicAction objects.

    This class provides methods for adding, removing, and retrieving
    ChannelPrivateAction objects from a database.
    """

    def __init__(self: ChannelPublicActionRepository, database: sqlite3.Connection) -> None:
        """
        Initializes a new instance of ChannelPublicActionRepository.

        Args:
            database (sqlite3.Connection): The database connection.
        """
        super().__init__(database)
        cursor = self.db.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS action_channel_public "
            "(id TEXT PRIMARY KEY, channel_id INTEGER)"
        )
        self.db.commit()

    @override
    def get_by_id(self: Self, id_: uuid.UUID) -> ChannelPublicAction | None:
        result = (
            self.db.cursor()
            .execute("SELECT * FROM action_channel_public WHERE id=?", (str(id_),))
            .fetchone()
        )
        self.db.commit()
        return self._result_to_args(result)

    @override
    def add(self: Self, action: ChannelPublicAction) -> None:
        values = (str(action.id), action.channel_id)
        cursor = self.db.cursor()
        cursor.execute("INSERT INTO action_channel_public VALUES (?, ?)", values)
        self.db.commit()

    @override
    def remove(self: Self, id_: uuid.UUID) -> None:
        cursor = self.db.cursor()
        cursor.execute("DELETE FROM action_channel_public WHERE id=?", (str(id_),))
        self.db.commit()

    @staticmethod
    def _result_to_args(result: tuple | None) -> ChannelPublicAction | None:
        return ChannelPublicAction(uuid.UUID(result[0]), result[1]) if result else None
