"""
Action of "Broadcast", used for making announcements to a channel.

This incorporates an override for a Broadcast action as well as an
sqlite repository to store the associated data.
"""

from __future__ import annotations

import uuid
from typing import TYPE_CHECKING, Self, override

from spacecat.modules.automation.event_scheduler import Action, ActionRepository

if TYPE_CHECKING:
    import sqlite3


class BroadcastAction(Action):
    """
    Represents an action that sends a broadcast to a text channel.

    A broadcast is a special type of message that makes use of an embed,
    consisting of a header as well as a message body.
    """

    def __init__(
        self: BroadcastAction, id_: uuid.UUID, text_channel_id: int, title: str, message: str
    ) -> None:
        """
        Initialise a Broadcast action instance.

        Use the create_new classmethod to generate a new instance with
        an autogenerated id.

        Args:
            id_ (uuid.UUID): The unique identifier for the action.
            text_channel_id (int): The ID of the text channel where the
                broadcast will be sent.
            title (str): The title of the broadcast.
            message (str): The message body of the broadcast.
        """
        super().__init__(id_)
        self.text_channel_id = text_channel_id
        self.title = title
        self.message = message

    @classmethod
    def create_new(
        cls: type[BroadcastAction], text_channel_id: int, title: str, message: str
    ) -> BroadcastAction:
        """
        Create a new BroadcastAction instance.

        Parameters:
            text_channel_id (int): The ID of the text channel where the
                broadcast will be sent.
            title (str): The title of the broadcast.
            message (str): The message body of the broadcast.

        Returns:
            Self: A new instance of the class,
        """
        return cls(uuid.uuid4(), text_channel_id, title, message)

    @override
    def get_formatted_output(self: Self) -> str:
        return f"Sends a broadcast titled '{self.title}' to channel <#{self.text_channel_id}>."

    @override
    def get_name() -> str:
        return "broadcast"


class BroadcastActionRepository(ActionRepository[BroadcastAction]):
    """
    Repository for managing BroadcastAction objects.

    This class provides methods for adding, removing, and retrieving
    BroadcastAction objects from a database.
    """

    def __init__(self: BroadcastActionRepository, database: sqlite3.Connection) -> None:
        """
        Initializes a BroadcastActionRepository instance.

        Args:
            database (sqlite3.Connection): The database connection.
        """
        super().__init__(database)
        cursor = self.db.cursor()
        cursor.execute(
            "CREATE TABLE IF NOT EXISTS action_broadcast "
            "(id TEXT PRIMARY KEY, text_channel INTEGER, title TEXT, message TEXT)"
        )
        self.db.commit()

    @override
    def get_by_id(self: Self, id_: uuid.UUID) -> BroadcastAction | None:
        result = (
            self.db.cursor()
            .execute("SELECT * FROM action_broadcast WHERE id=?", (str(id_),))
            .fetchone()
        )
        return self._result_to_action(result)

    @override
    def add(self: Self, action: BroadcastAction) -> None:
        values = (str(action.id), action.text_channel_id, action.title, action.message)
        cursor = self.db.cursor()
        cursor.execute("INSERT INTO action_broadcast VALUES (?, ?, ?, ?)", values)
        self.db.commit()

    @override
    def remove(self: Self, id_: uuid.UUID) -> None:
        cursor = self.db.cursor()
        cursor.execute("DELETE FROM action_broadcast WHERE id=?", (str(id_),))
        self.db.commit()

    @staticmethod
    def _result_to_action(result: tuple) -> BroadcastAction | None:
        """
        Converts a database result tuple into a BroadcastAction object.

        Args:
            result (tuple): The database result tuple to convert.

        Returns:
            BroadcastAction | None: The converted BroadcastAction object
                or None if the result is empty.
        """
        return (
            BroadcastAction(uuid.UUID(result[0]), result[1], result[2], result[3])
            if result
            else None
        )
